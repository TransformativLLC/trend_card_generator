from typing import List
from pydantic_ai import Agent
from pydantic_ai.settings import ModelSettings
from pydantic_ai.models.google import GoogleModel, GoogleModelSettings

from google.genai.types import HarmBlockThreshold, HarmCategory, SafetySettingDict

from src.models import TrendCard
from src.utils.configuration import load_config
from src.utils.fileio import read_file


class TrendCardEditor:
    """
    Handles the configuration, initialization, and operation of an agent used for generating trend cards.

    This class is designed to streamline the process of loading configurations, setting up prompt templates,
    and utilizing a preconfigured model to produce trend card components based on input data. The generated
    trend cards are produced asynchronously using a predefined agent and prompt system.

    Attributes:
        config (dict): The configuration dictionary loaded from the specified file.
        system_prompt (str): Predefined system prompt used by the agent.
        agent (Agent): Configured agent instance for generating trend cards.
    """

    def __init__(self, config_path: str = "src/agents/config",
                 config_file_name: str = "trend_card_editor.yaml",
                 section_word_limit: int = 40):
        """
        Initializes an instance of a class that configures and creates an agent based on the provided
        configuration file. It loads configuration settings, stores prompt templates, and initializes
        an agent with the specified model and parameters.

        Args:
            config_path (str): Path to the configuration file. Defaults to "trend_card_agent.yaml".
        """

        # read config
        self.config = load_config(config_file_name, config_path)

        # save prompt templates
        self.system_prompt = self.config["system_prompt"].format(word_limit=section_word_limit)

        # save reminder in editor prompt
        self.section_word_limit = section_word_limit

        # create the agent
        # the Google API is different than those for OpenAI, Anthropic, etc., so need google-specific code
        if self.config["model"].startswith("gemini"):
            safety_settings = SafetySettingDict(
                category=HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
                threshold=HarmBlockThreshold.BLOCK_LOW_AND_ABOVE
            )
            settings = GoogleModelSettings(
                temperature=self.config.get("temperature", 0.5),
                max_tokens=self.config.get("max_tokens", 2048),
                google_thinking_config={'thinking_budget': self.config.get("thinking_budget", 2048)},
                google_safety_settings=[safety_settings]
            )
            model = GoogleModel(self.config["model"])
        else:
            settings=ModelSettings(
                max_tokens=self.config.get("max_tokens", 2048),
                temperature=self.config.get("temperature", 0.5)
            )
            model=self.config["model"]

        self.agent = Agent(
            model=model,
            model_settings=settings,
            output_type=TrendCard,
            system_prompt=self.system_prompt,
            retries=self.config.get("generator_retries", 3)
        )


    async def edit_trend_card(self, trend_card_text: str) -> TrendCard:
        """
        Edits a trend card by processing the provided text through the agent.

        This method takes the input trend card text, processes it using the agent,
        and returns the resultant TrendCard object. It ensures that the trend card
        text is transformed or updated based on the agent's output.

        Args:
            trend_card_text (str): The text of the trend card to be edited.

        Returns:
            TrendCard: The transformed or updated trend card output generated by
                the agent.

        Raises:
            Exception: If the agent fails to process the input or another issue
                occurs during editing.
        """

        # create the finished prompt
        # prompt = f"""TREND CARD TO BE EDITED
        # {trend_card_text}
        #
        # OUTPUT REQUIREMENTS
        # The four sections (Description, Implications, Opportunities, Challenges) combined, when "re-written,
        # should total {self.length_range} words. This length requirement is VERY IMPORTANT. Please ensure it is
        # not exceeded.
        # """

        # Run the agent
        result = await self.agent.run(trend_card_text)
        return result.output


    async def edit_batch(self, file_list: List[str], target_dir: str,
                         file_name_suffix: str, verbose: bool = False) -> None:
        """
        Asynchronously edits a batch of text files and saves the modified content to a target directory. Each file's content is
        processed through the `edit_trend_card` method, and the resultant content is saved using the provided file name suffix.

        Args:
            file_list (List[str]): A list of file paths to be read and edited.
            target_dir (str): The directory where the edited files will be saved.
            file_name_suffix (str): A suffix appended to the file names of the edited files.
            verbose (bool, optional): Enables verbose mode to log processing details if set to True. Defaults to False.

        Returns:
            None
        """
        if verbose: print(f'Editing {len(file_list)} files in "{target_dir}"...')
        i = 1
        for file in file_list:
            text = read_file(file)
            trend_card = await self.edit_trend_card(text)
            saved_file_name = trend_card.save_to_file(file_path=target_dir, file_name_suffix=file_name_suffix)
            if verbose:
                print(f"{i}: {saved_file_name}")
                print("\nWORD LENGTHS")
                print(trend_card.get_length(), end="\n" * 2)
                i += 1